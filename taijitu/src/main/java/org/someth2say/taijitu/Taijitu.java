package org.someth2say.taijitu;

import org.apache.commons.configuration2.ImmutableHierarchicalConfiguration;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.someth2say.taijitu.compare.ComparisonResult;
import org.someth2say.taijitu.config.apache.ApacheTaijitu;
import org.someth2say.taijitu.config.impl.TaijituCfg;
import org.someth2say.taijitu.config.interfaces.IComparisonCfg;
import org.someth2say.taijitu.config.interfaces.IPluginCfg;
import org.someth2say.taijitu.config.interfaces.ITaijituCfg;
import org.someth2say.taijitu.source.query.ConnectionManager;
import org.someth2say.taijitu.plugins.TaijituPlugin;
import org.someth2say.taijitu.registry.*;
import org.someth2say.taijitu.util.FileUtil;
import org.someth2say.taijitu.util.LogUtils;

import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.concurrent.*;

import static org.someth2say.taijitu.config.DefaultConfig.DEFAULT_CONFIG_FILE;
import static org.someth2say.taijitu.config.DefaultConfig.DEFAULT_LOG_FILE;

/**
 * @author Jordi Sola
 */
public final class Taijitu {

    private static final Logger logger = Logger.getLogger(Taijitu.class);

    public Taijitu() {
    }


    private ITaijituCfg initialise(final ImmutableHierarchicalConfiguration properties) throws TaijituException {
        ApacheTaijitu delegate = ApacheTaijitu.fromApacheConfig(properties);
        TaijituCfg itaijitu = new TaijituCfg(delegate);
        performSetup(itaijitu);
        return itaijitu;
    }


    private ITaijituCfg initialise(final String configProperties) throws TaijituException {
        ITaijituCfg delegate = ApacheTaijitu.fromFile(configProperties);
        TaijituCfg itaijitu = new TaijituCfg(delegate);
        performSetup(itaijitu);
        return itaijitu;
    }

    private void performSetup(final ITaijituCfg config) {
        setupFolders(config);
        setupLogging(config);
        setupRegistries(config);
    }

    //TODO: This registry stuff may be moved to a IC context (Weld?)
    private void setupRegistries(final ITaijituCfg config) {
        if (config.isUseScanClassPath()) {
            PluginRegistry.scanClassPath();
            ComparisonStrategyRegistry.scanClassPath();
            MatcherRegistry.scanClassPath();
            EqualityStrategyRegistry.scanClassPath();
            SourceTypeRegistry.scanClassPath();
        } else {
            PluginRegistry.useDefaults();
            ComparisonStrategyRegistry.useDefaults();
            MatcherRegistry.useDefaults();
            EqualityStrategyRegistry.useDefaults();
            SourceTypeRegistry.useDefaults();
        }
    }

    public static void main(final String[] args) {
        if (args.length != 1) {
            FileUtil.dumpResource("usage-taijitu.txt");
        } else {
            // run comparison with default values
            try {
                new Taijitu().compare(args[0]);
            } catch (TaijituException e) {
                logger.fatal("Unable to start: ", e);
            }
        }
    }

    public ComparisonResult[] compare() throws TaijituException {
        return compare(DEFAULT_CONFIG_FILE);
    }

    public ComparisonResult[] compare(final String configProperties) throws TaijituException {
        ITaijituCfg config = initialise(configProperties);
        return performComparisons(config);
    }


    public ComparisonResult[] compare(final ImmutableHierarchicalConfiguration properties) throws TaijituException {
        ITaijituCfg config = initialise(properties);
        return performComparisons(config);
    }


    private ComparisonResult[] performComparisons(final ITaijituCfg config) throws TaijituException {
        logger.info("Start comparisons.");

        IComparisonCfg[] comparisons = config.getComparisons();

//        startDataSources(config);

        startPlugins(config);

        final CompletionService<ComparisonResult> completionService = runComparisons(config);

        // Collect results
        final ComparisonResult[] result = getComparisonResults(completionService, comparisons);

        endPlugins(config);

        // Close all open connections generated by comparison queries:
        closeDataSources();

        return result;

    }

    private CompletionService<ComparisonResult> runComparisons(final ITaijituCfg config) throws TaijituException {
        final ExecutorService executorService = Executors.newFixedThreadPool(config.getThreads());
        CompletionService<ComparisonResult> completionService = new ExecutorCompletionService<>(executorService);

        //final Collection<Future<ComparisonResult>> futures =
        runComparisonThreads(completionService, config);

        // Shutdown: no more tasks allowed.
        executorService.shutdown();

        return completionService;
    }


    private void endPlugins(ITaijituCfg config) throws TaijituException {
        List<IPluginCfg> allPluginsConfig = config.getComparisonPluginConfigs();
        for (IPluginCfg pluginConfigIface : allPluginsConfig) {
            TaijituPlugin plugin = PluginRegistry.getPlugin(pluginConfigIface.getName());
            plugin.end(pluginConfigIface);
        }
    }

    private void startPlugins(ITaijituCfg config) throws TaijituException {
        List<IPluginCfg> allPluginsConfig = config.getComparisonPluginConfigs();
        for (IPluginCfg pluginConfigIface : allPluginsConfig) {
            TaijituPlugin plugin = PluginRegistry.getPlugin(pluginConfigIface.getName());
            plugin.start(pluginConfigIface);
        }
    }

    private ComparisonResult[] getComparisonResults(CompletionService<ComparisonResult> completionService,
                                                    IComparisonCfg[] comparisonConfigIfaces) {
        final ComparisonResult[] result = new ComparisonResult[comparisonConfigIfaces.length];
        for (int i = 0; i < comparisonConfigIfaces.length; i++) {
            try {
                Future<ComparisonResult> future = completionService.take();
                try {
                    result[i] = future.get();
                } catch (ExecutionException e) {
                    logger.error("Unable to obtain comparison result.", e);
                    result[i] = null;
                }
            } catch (InterruptedException e) {
                logger.error("Unable to obtain comparison result.", e);
                result[i] = null;
            }
        }
        return result;
    }

    private void closeDataSources() {
        ConnectionManager.closeAllDataSources();
    }

    private Collection<Future<ComparisonResult>> runComparisonThreads(
            final CompletionService<ComparisonResult> completionService, final ITaijituCfg config) {

        final IComparisonCfg[] comparisons = config.getComparisons();
        final Collection<Future<ComparisonResult>> result = new ArrayList<>(comparisons.length);

        for (IComparisonCfg comparison : comparisons) {

            try {
                final TaijituRunner taijituRunner = new TaijituRunner(comparison);

                Future<ComparisonResult> future = completionService.submit(taijituRunner);

                result.add(future);

            } catch (final TaijituException e) {
                logger.error("Error while creating comparison: " + comparison + "\n Please review config.", e);
            }
        }

        return result;
    }

    private void setupFolders(final ITaijituCfg config) {
        final File outputFolder = new File(config.getOutputFolder());
        if (!outputFolder.exists()) {
            final boolean dirCreated = outputFolder.mkdirs();
            if (!dirCreated) {
                logger.error("Error while trying to create output folder: " + outputFolder.getAbsolutePath());
            }
        }
    }

    private void setupLogging(final ITaijituCfg config) {
        enableFileLog(config);
        enableConsoleLog(config);
    }

    private void enableFileLog(final ITaijituCfg config) {
        final Level level = Level.toLevel(config.getFileLog(), Level.OFF);
        if (level != Level.OFF) {
            final String fileName = config.getOutputFolder() + File.separator + DEFAULT_LOG_FILE;
            LogUtils.addFileAppenderToRootLogger(level, LogUtils.DEFAULT_PATTERN, fileName);
        }
    }

    private void enableConsoleLog(final ITaijituCfg config) {
        final Level level = Level.toLevel(config.getConsoleLog(), Level.INFO);
        LogUtils.addConsoleAppenderToRootLogger(level, LogUtils.DEFAULT_PATTERN);
    }

}
