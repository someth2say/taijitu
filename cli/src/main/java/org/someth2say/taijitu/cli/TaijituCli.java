package org.someth2say.taijitu.cli;

import org.apache.commons.configuration2.HierarchicalConfiguration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.someth2say.taijitu.cli.config.TaijituConfig;
import org.someth2say.taijitu.cli.config.interfaces.IComparisonCfg;
import org.someth2say.taijitu.cli.config.interfaces.ITaijituCfg;
import org.someth2say.taijitu.cli.registry.MapperRegistry;
import org.someth2say.taijitu.cli.registry.SourceRegistry;
import org.someth2say.taijitu.cli.registry.EqualizerRegistry;
import org.someth2say.taijitu.cli.source.query.ConnectionManager;
import org.someth2say.taijitu.cli.util.FileUtil;
import org.someth2say.taijitu.equality.explain.Difference;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.*;
import java.util.stream.Stream;

import static org.someth2say.taijitu.cli.config.DefaultConfig.DEFAULT_CONFIG_FILE;

/**
 * @author Jordi Sola
 */
public final class TaijituCli {

    private static final Logger logger = LoggerFactory.getLogger(TaijituCli.class);

    private static ITaijituCfg configFromApache(final HierarchicalConfiguration properties) {
        return TaijituConfig.fromApacheConfig(properties);
    }


    private static ITaijituCfg configFromFile(final String fileName) throws TaijituCliException {
        return TaijituConfig.fromPropertiesFile(fileName);
    }

    private static void performSetup(final ITaijituCfg config) throws TaijituCliException {
        try {
            setupRegistries(config);
        } catch (Exception e) {
            throw new TaijituCliException("Unable to prepare TaijituCli.", e);
        }
    }

    //This registry stuff may be moved to a IC context (Weld?)
    private static void setupRegistries(final ITaijituCfg config) {
        if (config.isUseScanClassPath()) {
            EqualizerRegistry.scanClassPath();
            SourceRegistry.scanClassPath();
            MapperRegistry.scanClassPath();
        } else {
            EqualizerRegistry.useDefaults();
            SourceRegistry.useDefaults();
            MapperRegistry.useDefaults();
        }
    }

    public static void main(final String[] args) {
        if (args.length != 1) {
            FileUtil.dumpResource("usage-taijitu.txt");
        } else {
            // run comparison with default values
            try {
                TaijituCli.compare(args[0]);
            } catch (TaijituCliException e) {
                logger.error("Unable to start: ", e);
            }
        }
    }

    public static List<Stream<Difference<Object>>> compare() throws TaijituCliException {
        return compare(DEFAULT_CONFIG_FILE);
    }

    private static List<Stream<Difference<Object>>> compare(final String fileName) throws TaijituCliException {
        return compare(configFromFile(fileName));
    }


    public static List<Stream<Difference<Object>>> compare(final HierarchicalConfiguration<Object> properties) throws TaijituCliException {
        return compare(configFromApache(properties));
    }


    public static List<Stream<Difference<Object>>> compare(final ITaijituCfg config) throws TaijituCliException {
        logger.info("Start comparisons.");
        performSetup(config);

        Integer threads = config.getThreads();
        List<IComparisonCfg> comparisons = config.getComparisons();

        final CompletionService<Stream<Difference<Object>>> completionService = runComparisons(threads, comparisons);

        // Collect results
        final List<Stream<Difference<Object>>> result = getResults(completionService, comparisons.size());

        // Close all open connections generated by comparison queries:
        closeSources();

        return result;

    }

    private static CompletionService<Stream<Difference<Object>>> runComparisons(Integer threads, List<IComparisonCfg> comparisons) {
        final ExecutorService executorService = Executors.newFixedThreadPool(threads);
        CompletionService<Stream<Difference<Object>>> completionService = new ExecutorCompletionService<>(executorService);

        comparisons.forEach(comparison -> completionService.submit(new TaijituCliRunner(comparison)));

        executorService.shutdown();

        return completionService;
    }

    private static List<Stream<Difference<Object>>> getResults(CompletionService<Stream<Difference<Object>>> completionService, int size) {
        final List<Stream<Difference<Object>>> result = new ArrayList<>(size);

        for (int i = 0; i < size; i++) {
            try {
                Future<Stream<Difference<Object>>> future = completionService.take();
                try {
                    result.add(future.get());
                } catch (ExecutionException e) {
                    logger.error("Unable to obtain comparison results.", e);
                    result.add(null);
                }
            } catch (InterruptedException e) {
                logger.error("Unable to obtain comparison results.", e);
                result.add(null);
            }
        }
        return result;
    }

    private static void closeSources() {
        ConnectionManager.closeAllDataSources();
    }

}
